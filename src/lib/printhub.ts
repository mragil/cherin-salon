// @ts-expect-error package don't have type
class PrintHub{constructor({paperSize:t="58",printerType:e="bluetooth"}={}){if(this.encoder=new TextEncoder,this.center=new Uint8Array([27,97,1]),this.right=new Uint8Array([27,97,2]),this.left=new Uint8Array([27,97,0]),this.boldOn=new Uint8Array([27,69,1]),this.boldOff=new Uint8Array([27,69,0]),this.underlineOn=new Uint8Array([27,45,1]),this.underlineOff=new Uint8Array([27,45,0]),this.doubleSize=new Uint8Array([29,33,17]),this.normalSize=new Uint8Array([29,33,0]),this.printChar=null,this.printerType=e,"bluetooth"!==e&&"usb"!==e)throw Error('Invalid printer type. Only "bluetooth" and "usb" are supported.');if("58"!==t&&"80"!==t)throw Error('Invalid paper size. Only "58" and "80" are supported.');this.paperSize=t}setPaperSize(t){this.paperSize=t}async checkBluetooth(){return navigator.bluetooth.getAvailability()}async setDefault(t){t&&(await t.writeValue(this.left.buffer),await t.writeValue(this.normalSize.buffer),await t.writeValue(this.boldOff.buffer),await t.writeValue(this.underlineOff.buffer))}async writeLineBreak({count:t=1}={}){if(this.printChar){if("usb"===this.printerType)for(let e=0;e<t;e++){let i=[10];try{let r=this.printChar.configuration.interfaces[0].alternate.endpoints.find(t=>"out"===t.direction);if(!r)throw Error("No suitable endpoint found for USB printing.");await this.printChar.transferOut(r.endpointNumber,new Uint8Array(i)),console.log("Data sent to USB printer.")}catch(n){console.error("Failed to print via USB:",n)}}else for(let a=0;a<t;a++)await this.printChar.writeValue(new Uint8Array([10]).buffer)}}async writeDashLine(){if(this.printChar){if("usb"===this.printerType){let t=[...this.encoder.encode("-".repeat("58"===this.paperSize?32:42)),];try{let e=this.printChar.configuration.interfaces[0].alternate.endpoints.find(t=>"out"===t.direction);if(!e)throw Error("No suitable endpoint found for USB printing.");await this.printChar.transferOut(e.endpointNumber,new Uint8Array(t)),console.log("Data sent to USB printer.")}catch(i){console.error("Failed to print via USB:",i)}}else await this.printChar.writeValue(this.encoder.encode("-".repeat("58"===this.paperSize?32:42)));await this.writeLineBreak()}}async writeTextWith2Column(t,e,{bold:i=!1,underline:r=!1,align:n="left",size:a="normal"}={}){let s=this.printChar;if(s){if("usb"===this.printerType){let o=[27,33,i?8:0,27,45,r?1:0,27,97,"center"===n?1:"right"===n?2:0,29,33,"double"===a?17:0,...this.encoder.encode(this.createItemData(t,e)),10,];try{let l=s.configuration.interfaces[0].alternate.endpoints.find(t=>"out"===t.direction);if(!l)throw Error("No suitable endpoint found for USB printing.");await s.transferOut(l.endpointNumber,new Uint8Array(o)),console.log("Data sent to USB printer.")}catch(h){console.error("Failed to print via USB:",h)}}else i&&await s.writeValue(this.boldOn.buffer),r&&await s.writeValue(this.underlineOn.buffer),"center"===n?await s.writeValue(this.center.buffer):"right"===n?await s.writeValue(this.right.buffer):await s.writeValue(this.left.buffer),"double"===a&&await s.writeValue(this.doubleSize.buffer),await s.writeValue(this.encoder.encode(this.createItemData(t,e))),await this.setDefault(s),await this.writeLineBreak()}}async writeText(t,{bold:e=!1,underline:i=!1,align:r="left",size:n="normal"}={}){let a=this.printChar;if(a){if("usb"===this.printerType){let s=[27,33,e?8:0,27,45,i?1:0,27,97,"center"===r?1:"right"===r?2:0,29,33,"double"===n?17:0,...this.encoder.encode(t),10,];try{let o=a.configuration.interfaces[0].alternate.endpoints.find(t=>"out"===t.direction);if(!o)throw Error("No suitable endpoint found for USB printing.");await a.transferOut(o.endpointNumber,new Uint8Array(s)),console.log("Data sent to USB printer.")}catch(l){console.error("Failed to print via USB:",l)}}else e&&await a.writeValue(this.boldOn.buffer),i&&await a.writeValue(this.underlineOn.buffer),"center"===r?await a.writeValue(this.center.buffer):"right"===r?await a.writeValue(this.right.buffer):await a.writeValue(this.left.buffer),"double"===n&&await a.writeValue(this.doubleSize.buffer),await a.writeValue(this.encoder.encode(t)),await this.setDefault(a),await this.writeLineBreak()}}async connectToPrint({onReady:t,onFailed:e}){try{"usb"===this.printerType?await navigator.usb.requestDevice({filters:[]}).then(async e=>{await e.open(),await e.selectConfiguration(1),await e.claimInterface(0),console.log(e),this.printChar=e,t(this)}).catch(t=>{e(t.message)}):"bluetooth"===this.printerType?await this.checkBluetooth()?null==this.printChar?navigator.bluetooth.requestDevice({filters:[{acceptAllDevices:!0,services:["000018f0-0000-1000-8000-00805f9b34fb"]},]}).then(t=>(t.gatt.connect())).then(t=>(t.getPrimaryService("000018f0-0000-1000-8000-00805f9b34fb"))).then(t=>t.getCharacteristics()).then(i=>{let r=null;i.forEach(t=>{console.log("Characteristic UUID: "+t.uuid),t.properties.write&&(r=t,this.printChar=r)}),r?t(this):e("No writable characteristic found.")}).catch(t=>{console.error(t)}):t(this):e("Perangkat Anda tidak mendukung untuk melakukan print dengan Bluetooth"):e("Printer type not supported.")}catch(i){e(i.message)}}createItemData(t,e){let i=("58"==this.paperSize?32:40)-t.length-e.length;return t+" ".repeat(i)+e}}
export default PrintHub;